
class Solution{   
public:
   bool solve(vector<int>& arr, int sum, int i, vector<vector<int>>&dp) {
    // Base case: agar ham  reached the end of the array
      if(sum == 0) {
            return true;
        }
    
      if (i >= arr.size() || sum < 0) {
        
        return false; 
       }
       
     if(dp[i][sum] != -1) {
        return dp[i][sum];
    }
    // Include the current element in the subset
    bool include=solve(arr, sum-arr[i], i + 1,dp);

       
    bool notInclude= solve(arr, sum, i + 1,dp);
   
   return dp[i][sum]=notInclude||include;
}

bool isSubsetSum(vector<int>& arr, int sum) {

    // bool ans = false;
   
    // solve(arr, sum, ans, 0);
    
    int n =arr.size();
    // n is no of row and sum+1 is column assigned with -1
    vector<vector<int>>dp(n,vector<int>(sum+1,-1));
    bool ans=solve(arr,sum,0,dp);
    return ans;
}

};

