class Solution {
public:
    int Recursion(int n){
        // base case
        if(n<=0)return 0; //0 is not perfect square
        int i=1;
        int ans=INT_MAX;
        while(i<=sqrt(n)){
           int perfectsquare=i*i;
           int NoOfperfectSquares=1+Recursion(n-perfectsquare);
           ans=min(ans,NoOfperfectSquares);
           i++;
        }
        return ans;
    }

    int Solvememo(int n,vector<int>&dp){
        if(n<=0)return 0; 
        if(dp[n]!=-1)return dp[n];

        int i=1;
        int ans=INT_MAX;
        while(i<=sqrt(n)){
           int perfectsquare=i*i;
           int NoOfperfectSquares=1+Solvememo(n-perfectsquare,dp);
           ans=min(ans,NoOfperfectSquares);
           i++;
        }
        return dp[n]=ans;
    }
    int numSquares(int n) {
        // int ans=Recursion(n);
        // crate a 1d dp here
        vector<int>dp(n+1,INT_MAX);
        // int ans=Solvememo(n,dp);

        dp[0]=0;
        int ans=INT_MAX;
        for(int i = 1; i <= n; i++) {
            // Iterat kar rhe hai all possible perfect squares less than or equal to i ke
            for(int j = 1; j * j <= i; j++) {
                dp[i] = min(dp[i], dp[i - j * j] + 1);
            }
        }
        return dp[n];

    }
};
